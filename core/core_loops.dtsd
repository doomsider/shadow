#!/bin/bash
# Shadow .01 Based off of DTSD
# Script that follows the log and feeds the log into the search functions and database

MYSQLDTSD_SERVERLOG_LOGSTRING="TEXT NOT NULL"
MYSQLDTSD_SERVERLOG_LOGDATE=TIMESTAMP

MYSQLDTSD_COMMANDDB_LOGDATE=TIMESTAMP
MYSQLDTSD_COMMANDDB_PARAMETER="TEXT NOT NULL"
MYSQLDTSD_COMMANDDB_COMMAND="TEXT NOT NULL"

MYSQLDTSD_SEARCHDB_SEARCHSTRING="VARCHAR(255)"
MYSQLDTSD_SEARCHDB_SEARCHFUNCTION="VARCHAR(50)"

# The current logging script works by feeding the current starmade log into the database and then searching the database to find matches with search
# strings and their associated functions
core_taillog() {
	log_myerasetable SERVERLOG
# Tail with -F to prevent rollover file from stopping read is extremely fast and lightweight method for feeding log lines into the database
	tail -F $CONFIGDTSD_INSTALLPATH/StarMade/logs/log.txt.0 |
    while read a; do
# Quotations will cause Mysql to error so they are removed with a in line edit 
		STRING=${a//\"/}
#		echo "INSERT INTO SERVERLOG LOGSTRING $STRING"
		mysql -D $CONFIGDTSD_MYSQLDB -u $CONFIGDTSD_MYSQLUSER -p$CONFIGDTSD_MYSQLPASS -e "INSERT INTO SERVERLOG (LOGSTRING) VALUES (\"$STRING\");"
    done
}
core_searchlog() {
	log_myerasetable TRIGGERDB
	log_myerasetable COMMANDDB
	while lib_check_server_running
	do 
		# mysql -D $CONFIGDTSD_MYSQLDB -u $CONFIGDTSD_MYSQLUSER -p$CONFIGDTSD_MYSQLPASS -sNe "SELECT line FROM SERVERLOG ORDER BY line DESC LIMIT 1;"
		NUMOFLINES=$(mysql -D $CONFIGDTSD_MYSQLDB -u $CONFIGDTSD_MYSQLUSER -p$CONFIGDTSD_MYSQLPASS -sNe "SELECT line FROM SERVERLOG ORDER BY line DESC LIMIT 1;")
		#echo "Here is the last line of the log $NUMOFLINES"
		# if the number of lines isn't detected it is because no lines have been fed yet
		if [ -z "$NUMOFLINES" ]
		then
			NUMOFLINES=0
#			echo "Setting numoflines to 0"
		fi
		if [ -z "$LINESTART" ]
		then
			LINESTART=$NUMOFLINES
#			echo "Start at line $LINESTART"
		fi
		LOGACTIVE=NO
		if [ "$NUMOFLINES" -gt "$LINESTART" ] 
		then
#			echo "$NUMOFLINES is the total lines of the log"
#			echo "$LINESTART is linestart"
			let LINESTART++
			mysql -D $CONFIGDTSD_MYSQLDB -u $CONFIGDTSD_MYSQLUSER -p$CONFIGDTSD_MYSQLPASS -e  "INSERT INTO COMMANDDB (PARAMETER, COMMAND) SELECT SERVERLOG.LOGSTRING, SEARCHDB.SEARCHFUNCTION FROM SERVERLOG, SEARCHDB WHERE LOCATE(SEARCHDB.SEARCHSTRING, SERVERLOG.LOGSTRING) > 0 AND SERVERLOG.line <= $NUMOFLINES AND SERVERLOG.line >= $LINESTART ORDER BY SERVERLOG.line ASC"
			LINESTART=$NUMOFLINES
			LOGACTIVE=YES
		fi
		if [ "$LOGACTIVE" = "NO" ]
		then
			sleep 1
		fi
		
	done
}
core_executelog() {
	while lib_check_server_running
	do 
		RECIEVEDCOMMAND=$(mysql -D $CONFIGDTSD_MYSQLDB -u $CONFIGDTSD_MYSQLUSER -p$CONFIGDTSD_MYSQLPASS -sNe "select COMMAND from COMMANDDB order by line asc limit 1;")
		if [ -z "$RECIEVEDCOMMAND" ]
		then
			EXECTUTEACTIVE=NO
		else
			EXECTUTEACTIVE=YES
			RECIEVEDPARAMETER=$(mysql -D $CONFIGDTSD_MYSQLDB -u $CONFIGDTSD_MYSQLUSER -p$CONFIGDTSD_MYSQLPASS -sNe "select PARAMETER from COMMANDDB order by line asc limit 1;")
			#CURRENTARRAY=($RECIEVEDPARAMETER)
			#unset CURRENTARRAY[0]
			#unset CURRENTARRAY[1]
			#FORMATEDPARAMETER=${CURRENTARRAY[@]}
			echo "executing $RECIEVEDCOMMAND $RECIEVEDPARAMETER"
			eval $RECIEVEDCOMMAND '$RECIEVEDPARAMETER'
			mysql -D $CONFIGDTSD_MYSQLDB -u $CONFIGDTSD_MYSQLUSER -p$CONFIGDTSD_MYSQLPASS -e "DELETE FROM COMMANDDB order by line asc limit 1;"
			
		fi
		if [ "$EXECTUTEACTIVE" = "NO" ]
		then
			sleep 1
		fi
	done
}
core_makesearchdb() {
# Make the search database which contains all the search strings and their related functions
	log_myerasetable SEARCHDB
	SEARCHVAR=( $(compgen -v | grep LOGSEARCH_ ) )
	SEARCHARRAY=0
	while [ -n "${SEARCHVAR[$SEARCHARRAY]+set}" ]
	do
		CURRENTSEARCH=${SEARCHVAR[$SEARCHARRAY]}
		CURRENTSEARCHSTRING=${!CURRENTSEARCH}
		CURRENTSEARCHFUNCTION=${CURRENTSEARCH#*_}
		lib_myinsert SEARCHDB SEARCHFUNCTION "$CURRENTSEARCHFUNCTION"
		lib_myupdate SEARCHDB SEARCHSTRING "$CURRENTSEARCHSTRING" SEARCHFUNCTION $CURRENTSEARCHFUNCTION
		let SEARCHARRAY++
	done
}

 
