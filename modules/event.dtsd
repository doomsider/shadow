#!/bin/bash
# Shadow .01 Based off of DTSD
# Functions for adding times events to the server through the use of Mysql Events

# In order to use scheduler is must be turned on with SET GLOBAL event_scheduler = ON; issued from root for Mysql
# Events are created by this format MYSQLEVENT_FREQUENCY_TIMEVALUE_TIMEQUANTITY_EVENTNAME="EVENT_FUNCTION_NAME"

# Acceptable variables for time quantity are YEAR | QUARTER | MONTH | DAY | HOUR | MINUTE | WEEK | SECOND | YEAR_MONTH | DAY_HOUR | DAY_MINUTE | DAY_SECOND | HOUR_MINUTE | HOUR_SECOND | MINUTE_SECOND
# Acceptable variables for frequency are REPEAT

MYSQLEVENT_REPEAT_600_SECOND_SERVERMESSAGE="EVENT_SERVERMESSAGE"
MYSQLEVENT_REPEAT_43200_SECOND_SERVERRESTART="EVENT_SERVERRESTART"
MYSQLEVENT_REPEAT_60_SECOND_VOTECHECK="ONINTERVAL_60_VOTECHECK"
MYSQLEVENT_REPEAT_300_SECOND_SERVERSTATUS="EVENT_SERVERSTATUS &"
MYSQLEVENT_REPEAT_3600_SECOND_SERVERVERSION="EVENT_SERVERVERSION"

DTSDHELP_myscheduler="\nMyscheduler usage: shadow.dtsd myscheduler on or off\nTurns the Myql Scheduler on or off.  Requires root password for Mysql\n"
DTSDHELP_clearschedule="\nClearschedule usage: shadow.dtsd clearschedule\nClears scheduled tasks\n"
DTSDHELP_addevents="\nAddevents usage: shadow.dtsd addevents\nAdds events from the script to the Mysql database\n"

core_myscheduler() {
# [Turns the Myql Scheduler on or off.  Requires root password for Mysql] myscheduler usage:  shadow.dtsd myscheduler <on/off>
	if [ "$#" -ne "2" ]
	then
		echo "Usage:  myscheduler on or off"
	else
		case $2 in
		on)
		echo "Turning on Mysql Scheduler"
		  read -p "The password for Mysql root : " INPUT
            if [ -n "$INPUT" ]
            then
				mysql -u root -p$INPUT -e "SET GLOBAL event_scheduler = ON"
            else
				"You must use root password to turn on or off scheduler"
				exit
            fi
		;;
		off)
		echo "Turning off Mysql Scheduler"
		  read -p "The password for Mysql root : " INPUT
            if [ -n "$INPUT" ]
            then
				mysql -u root -p$INPUT -e "SET GLOBAL event_scheduler = OFF"
            else
				"You must use root password to turn on or off scheduler"
				exit
            fi
		;;
		esac
	fi
}
core_clearschedule() {
# [Clears scheduled tasks] clearschedule usage: shadow.dtsd clearschedule
	echo "Clearing all Schedules"
	CREATEVAR=( $(compgen -v | grep MYSQLEVENT_ ) )
	while [ -n "${CREATEVAR[$CREATEARRAY]+set}" ]
	do
		CURRENTSEARCH=${CREATEVAR[$CREATEARRAY]}
		SCHEDULECOMMAND=${CURRENTSEARCH##*_}
		mysql -D $CONFIGDTSD_MYSQLDB -u $CONFIGDTSD_MYSQLUSER -p$CONFIGDTSD_MYSQLPASS -e "drop event $SCHEDULECOMMAND;"
		let CREATEARRAY++
	done
}
core_addevents() {
# [Adds events from the script to the Mysql database] usage: shadow.dtsd addevents
CREATEVAR=( $(compgen -v | grep MYSQLEVENT_ ) )
CREATEARRAY=0
	while [ -n "${CREATEVAR[$CREATEARRAY]+set}" ]
	do
		CURRENTSEARCH=${CREATEVAR[$CREATEARRAY]}
		cutstring=${CURRENTSEARCH#*_}
		SCHEDULETYPE=${cutstring%%_*}
		cutstring=${cutstring#*_}
		TIMEVALUE=${cutstring%%_*}
		cutstring=${cutstring#*_}
		TIMEQUANTITY=${cutstring%%_*}
		EVENTNAME=${cutstring#*_}
		SCHEDULECOMMAND=${!CURRENTSEARCH}
		echo "this is SCHEDULETYPE $SCHEDULETYPE TIMEVALUE $TIMEVALUE TIMEQUANTITY $TIMEQUANTITY SCHEDULECOMMAND $SCHEDULECOMMAND EVENTNAME $EVENTNAME"
		
		case $SCHEDULETYPE in
			REPEAT)
				mysql -D $CONFIGDTSD_MYSQLDB -u $CONFIGDTSD_MYSQLUSER -p$CONFIGDTSD_MYSQLPASS -e "drop event $EVENTNAME;"
				mysql -D $CONFIGDTSD_MYSQLDB -u $CONFIGDTSD_MYSQLUSER -p$CONFIGDTSD_MYSQLPASS -e "CREATE EVENT $EVENTNAME ON SCHEDULE EVERY $TIMEVALUE $TIMEQUANTITY DO INSERT INTO COMMANDDB (COMMAND) VALUES (\"$SCHEDULECOMMAND\");"
			;;
		esac
		let CREATEARRAY++
	done

}
EVENT_SERVERMESSAGE() {
# A simple server message to send to all players
	lib_screensend $CONFIGDTSD_MAINSCREEN "/chat Message sent from Shadow pre-Alpha database event"
}
EVENT_SERVERSTATUS() {
	echo "Checking Server Status"
	if lib_check_server_running
	then
		LASTLINE=$(mysql -D $CONFIGDTSD_MYSQLDB -u $CONFIGDTSD_MYSQLUSER -p$CONFIGDTSD_MYSQLPASS -sNe "SELECT line FROM SERVERLOG ORDER BY line DESC LIMIT 1;")
		LASTLINE=$(($LASTLINE - 5))
		CURRENTTIME=$(date +%s)
		lib_screensend $CONFIGDTSD_MAINSCREEN /pm SHADOW_SERVER_CHECK_$CURRENTTIME testing
		sleep 10
		SERVERREPAIR=$(mysql -D $CONFIGDTSD_MYSQLDB -u $CONFIGDTSD_MYSQLUSER -p$CONFIGDTSD_MYSQLPASS -sNe "select LOGSTRING from SERVERLOG where LOGSTRING like \"%Database Repairing itself%\" and SERVERLOG.line >= $LASTLINE") 
		if [ -n "$SERVERREPAIR" ]
			then
			echo "Sever appears to be repairing database"
		else
			echo "Server is not repairing database "
			CHECKSERVER=$(mysql -D $CONFIGDTSD_MYSQLDB -u $CONFIGDTSD_MYSQLUSER -p$CONFIGDTSD_MYSQLPASS -sNe "select LOGSTRING from SERVERLOG where LOGSTRING like \"%SHADOW_SERVER_CHECK_$CURRENTTIME%\"")
			echo "CHECKSERVER $CHECKSERVER"
			if [ -n "$CHECKSERVER" ]
			then
				echo "Sever appears to be running"
				mysql -D $CONFIGDTSD_MYSQLDB -u $CONFIGDTSD_MYSQLUSER -p$CONFIGDTSD_MYSQLPASS -e "INSERT INTO SERVERSTATUS (STATUS) VALUES (\"Server Running\");"
			else
				echo "Server appears to be down"
				mysql -D $CONFIGDTSD_MYSQLDB -u $CONFIGDTSD_MYSQLUSER -p$CONFIGDTSD_MYSQLPASS -e "INSERT INTO SERVERSTATUS (STATUS) VALUES (\"Restart server frozen\");"
				core_softreset
			fi
		fi
	else
		echo "Starmade is not running!"
		mysql -D $CONFIGDTSD_MYSQLDB -u $CONFIGDTSD_MYSQLUSER -p$CONFIGDTSD_MYSQLPASS -e "INSERT INTO SERVERSTATUS (STATUS) VALUES (\"Restart no server detected\");"
		core_softreset
	fi
}
EVENT_SERVERRESTART() {
mysql -D $CONFIGDTSD_MYSQLDB -u $CONFIGDTSD_MYSQLUSER -p$CONFIGDTSD_MYSQLPASS -e "INSERT INTO SERVERSTATUS (STATUS) VALUES (\"Restart\");"
core_softreset
}
EVENT_SERVERVERSION() {
# Manually check for latest version and install it 
	wget -q -O $CONFIGDTSD_INSTALLPATH/tmp.html http://files.star-made.org/build/
	RELEASE_URL=$(cat $CONFIGDTSD_INSTALLPATH/tmp.html | grep -o -E "[^<>]*?.zip" | tail -1)
	rm $CONFIGDTSD_INSTALLPATH/tmp.html
	#starmade-build_20150621_023107.zip
	#echo "RELEASE_URL $RELEASE_URL"
	cutstring=${RELEASE_URL#*_}
	SNEWVERSION1=${cutstring%_*}
	#echo "NEWVERSION1 $SNEWVERSION1"
	cutstring=${cutstring#*_}
	SNEWVERSION2=${cutstring%.*}
	#echo "NEWVERSION2 $SNEWVERSION2"
	CURRENTVER=$(cat $CONFIGDTSD_INSTALLPATH/StarMade/version.txt)
	#0.19289#20150621_023107
	cutstring=${CURRENTVER#*#}
	OLDSMVER1=${cutstring%_*}
	#echo "OLDSMVER1 $OLDSMVER1"
	OLDSMVER2=${CURRENTVER#*_}
	#echo "OLDSMVER2 $OLDSMVER2"
	if [ "$SNEWVERSION1" -gt "$OLDSMVER1" ] || [ "$SNEWVERSION2" -gt "$OLDSMVER2" ]
	then 
		mysql -D $CONFIGDTSD_MYSQLDB -u $CONFIGDTSD_MYSQLUSER -p$CONFIGDTSD_MYSQLPASS -e "INSERT INTO SERVERSTATUS (STATUS) VALUES (\"New Version Detected\");"
		echo "Newer Version Detected"
		core_clearschedule
# At this point the cronjobs and server will need to be stopped and a backup made just in case
		lib_screensend $CONFIGDTSD_MAINSCREEN "/chat New version detected going down for backup and upgrade"
		if lib_check_server_running
		then
			echo "$SERVICE is running... stopping."
# Issue Chat and a command to the server to shutdown
			lib_screensend $CONFIGDTSD_MAINSCREEN "/force_save"
			lib_screensend $CONFIGDTSD_MAINSCREEN "/chat Server Going down be back in a bit."
			lib_screensend $CONFIGDTSD_MAINSCREEN "/shutdown 60"
# Give the server a chance to gracefully shutdown if not kill it and then seg fault it if necessary
			sleep 60
			for LOOPNO in {0..30}
			do
				if lib_check_server_running
				then
					sleep 1
				else
					echo $CONFIGDTSD_SERVICE took $LOOPNO seconds to close
				break
				fi
			done
		fi
		if lib_check_server_running
		then
			echo $CONFIGDTSD_SERVICE is taking too long to close and may be frozen. Forcing shut down
			PID=$(ps aux | grep -v grep | grep $CONFIGDTSD_SERVICE | grep -v tee | grep port:$CONFIGDTSD_PORT | awk '{print $2}')
			kill $PID
			for LOOPNO in {0..30}
			do
				if lib_check_server_running
				then
					sleep 1
				else
					echo $CONFIGDTSD_SERVICE took $(($LOOPNO + 30)) seconds to close, and had to be force shut down
			break
				fi
			done
		fi
		if lib_check_server_running 
		then
			PID=$(ps aux | grep -v grep | grep $CONFIGDTSD_SERVICE | grep -v tee | grep port:$CONFIGDTSD_PORT | awk '{print $2}')
			kill -9 $PID			
			$CONFIGDTSD_SERVICE took too long to close. $CONFIGDTSD_SERVICE had to be killed
		else
			echo "$CONFIGDTSD_SERVICE not running"
		fi
# Core backup is commented out here but it is a good idea.  As the database grows zipping it up can take a long time so this has been taken into consideration for default config.
		#core_backup
		wget -P $CONFIGDTSD_INSTALLPATH http://files.star-made.org/build/$RELEASE_URL
		unzip -o $CONFIGDTSD_INSTALLPATH/$RELEASE_URL -d $CONFIGDTSD_INSTALLPATH/StarMade
		mysql -D $CONFIGDTSD_MYSQLDB -u $CONFIGDTSD_MYSQLUSER -p$CONFIGDTSD_MYSQLPASS -e "INSERT INTO SERVERSTATUS (STATUS) VALUES (\"New Version Installed\");"
		rm $CONFIGDTSD_INSTALLPATH/installed-version.txt
		rm $CONFIGDTSD_INSTALLPATH/$RELEASE_URL
		touch $CONFIGDTSD_INSTALLPATH/installed-version.txt
		echo $RELEASE_URL >> $CONFIGDTSD_INSTALLPATH/installed-version.txt
		mysql -D $CONFIGDTSD_MYSQLDB -u $CONFIGDTSD_MYSQLUSER -p$CONFIGDTSD_MYSQLPASS -e "INSERT INTO SERVERSTATUS (STATUS) VALUES (\"Restart after update\");"
		core_softreset
	else
		mysql -D $CONFIGDTSD_MYSQLDB -u $CONFIGDTSD_MYSQLUSER -p$CONFIGDTSD_MYSQLPASS -e "INSERT INTO SERVERSTATUS (STATUS) VALUES (\"Version current\");"
		echo "No new version detected"
	fi
}