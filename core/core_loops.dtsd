#!/bin/bash
# Shadow .01 Based off of DTSD
# Script that follows the log and feeds the log into the search functions and database

MYSQLDTSD_SERVERLOG_LOGSTRING="TEXT NOT NULL"
MYSQLDTSD_SERVERLOG_LOGDATE=TIMESTAMP
MYSQLALTER_SERVERLOG_LOGSTRING="UNIQUE INDEX"

MYSQLDTSD_log_LOGSTRING="VARCHAR(256) NOT NULL"
MYSQLDTSD_log_LOGDATE=TIMESTAMP
MYSQLALTER_log_LOGSTRING="UNIQUE INDEX"

MYSQLDTSD_COMMANDDB_LOGDATE=TIMESTAMP
MYSQLDTSD_COMMANDDB_PARAMETER="TEXT NOT NULL"
MYSQLDTSD_COMMANDDB_COMMAND="TEXT NOT NULL"

MYSQLDTSD_SEARCHDB_SEARCHSTRING="VARCHAR(255)"
MYSQLDTSD_SEARCHDB_SEARCHFUNCTION="VARCHAR(50)"

# The current logging script works by feeding the current starmade log into the database and then searching the database to find matches with search
# strings and their associated functions
core_loadlog() {
# This function is testing a solution to the sluggishness of the tailog function.  Currently it used Mysqlimport to rapidly insert lines into a table with a unique column.  This way the file can be loaded into the database again and again without adding duplicate lines.

	log_myerasetable log
	while lib_check_server_running
	do 
		 mysqlimport --user=$CONFIGDTSD_MYSQLUSER --password=$CONFIGDTSD_MYSQLPASS --columns=LOGSTRING --fields-terminated-by='\n' --silent --local dtsddb /home/ubuntu/StarMade/logs/log.txt.0
# Sleep added here to keep it from burning up the CPU.  This value can be modified based upon how aggressive you want the script to run.
		 sleep 0.5
	done
}

core_taillog() {
	log_myerasetable SERVERLOG
# Tail with -F to prevent rollover file from stopping read is extremely fast and lightweight method for feeding log lines into the database
	tail -F $CONFIGDTSD_INSTALLPATH/StarMade/logs/log.txt.0 |
    while read a; do
# Quotations will cause Mysql to error so they are removed with a in line edit 
		STRING=${a//\"/}
#		echo "INSERT INTO SERVERLOG LOGSTRING $STRING"
		mysql -D $CONFIGDTSD_MYSQLDB -u $CONFIGDTSD_MYSQLUSER -p$CONFIGDTSD_MYSQLPASS -e "INSERT INTO SERVERLOG (LOGSTRING) VALUES (\"$STRING\");"
    done
}
core_search_executelog() {
	log_myerasetable TRIGGERDB
	log_myerasetable COMMANDDB
	while true
	do 
		NUMOFLINES=$(mysql -D $CONFIGDTSD_MYSQLDB -u $CONFIGDTSD_MYSQLUSER -p$CONFIGDTSD_MYSQLPASS -sNe "SELECT line FROM log ORDER BY line DESC LIMIT 1;")
		#echo "Here is the last line of the log $NUMOFLINES"
		# if the number of lines isn't detected it is because no lines have been fed yet
		if [ -z "$NUMOFLINES" ]
		then
			NUMOFLINES=0
#			echo "Setting numoflines to 0"
		fi
		if [ -z "$LINESTART" ]
		then
			LINESTART=$NUMOFLINES
#			echo "Start at line $LINESTART"
		fi
		LOGACTIVE=NO
		if [ "$NUMOFLINES" -gt "$LINESTART" ] 
		then
#			echo "$NUMOFLINES is the total lines of the log"
#			echo "$LINESTART is linestart"
			let LINESTART++
			mysql -D $CONFIGDTSD_MYSQLDB -u $CONFIGDTSD_MYSQLUSER -p$CONFIGDTSD_MYSQLPASS -e  "INSERT INTO COMMANDDB (PARAMETER, COMMAND) SELECT log.LOGSTRING, SEARCHDB.SEARCHFUNCTION FROM log, SEARCHDB WHERE LOCATE(SEARCHDB.SEARCHSTRING, log.LOGSTRING) > 0 AND log.line <= $NUMOFLINES AND log.line >= $LINESTART ORDER BY log.line ASC"
			LINESTART=$NUMOFLINES
		fi
		OLD_IFS=$IFS
		IFS=$'\n'
		RECIEVEDCOMMAND=( $(mysql -D $CONFIGDTSD_MYSQLDB -u $CONFIGDTSD_MYSQLUSER -p$CONFIGDTSD_MYSQLPASS -sNe "select COMMAND from COMMANDDB order by line asc;") )
		RECIEVEDPARAMETER=( $(mysql -D $CONFIGDTSD_MYSQLDB -u $CONFIGDTSD_MYSQLUSER -p$CONFIGDTSD_MYSQLPASS -sNe "select PARAMETER from COMMANDDB order by line asc;") )
		mysql -D $CONFIGDTSD_MYSQLDB -u $CONFIGDTSD_MYSQLUSER -p$CONFIGDTSD_MYSQLPASS -e "truncate table COMMANDDB;"
		IFS=$OLD_IFS
		COMMANDARRAY=0
		PARAMETERARRAY=0
		while [ -n "${RECIEVEDCOMMAND[$COMMANDARRAY]+set}" ]
		do
			RECIEVEDCOMMAND=${RECIEVEDCOMMAND[$COMMANDARRAY]}
			RECIEVEDPARAMETER=${RECIEVEDPARAMETER[$PARAMETERARRAY]}
			echo "executing $RECIEVEDCOMMAND $RECIEVEDPARAMETER"
			eval $RECIEVEDCOMMAND '$RECIEVEDPARAMETER'
			let COMMANDARRAY++
			let PARAMETERARRAY++
		done
		sleep 0.1
	done
}
core_makesearchdb() {
# Make the search database which contains all the search strings and their related functions
	log_myerasetable SEARCHDB
	SEARCHVAR=( $(compgen -v | grep LOGSEARCH_ ) )
	SEARCHARRAY=0
	while [ -n "${SEARCHVAR[$SEARCHARRAY]+set}" ]
	do
		CURRENTSEARCH=${SEARCHVAR[$SEARCHARRAY]}
		CURRENTSEARCHSTRING=${!CURRENTSEARCH}
		CURRENTSEARCHFUNCTION=${CURRENTSEARCH#*_}
		lib_myinsert SEARCHDB SEARCHFUNCTION "$CURRENTSEARCHFUNCTION"
		lib_myupdate SEARCHDB SEARCHSTRING "$CURRENTSEARCHSTRING" SEARCHFUNCTION $CURRENTSEARCHFUNCTION
		let SEARCHARRAY++
	done
}