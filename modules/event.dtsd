#!/bin/bash
# Shadow .01 Based off of DTSD
# Functions for adding times events to the server through the use of Mysql Events

# In order to use scheduler is must be turned on with SET GLOBAL event_scheduler = ON; issued from root for Mysql
# Events are created by this format MYSQLEVENT_EVENTNAME_FREQUENCY_TIMEVALUE_TIMEQUANTITY="EVENT_FUNCTION_NAME"

# Acceptable variables for time quantity are YEAR | QUARTER | MONTH | DAY | HOUR | MINUTE | WEEK | SECOND | YEAR_MONTH | DAY_HOUR | DAY_MINUTE | DAY_SECOND | HOUR_MINUTE | HOUR_SECOND | MINUTE_SECOND
# Acceptable variables for frequency are REPEAT

MYSQLEVENT_REPEAT_600_SECOND_SERVERMESSAGE="EVENT_SERVERMESSAGE"
MYSQLEVENT_REPEAT_4320_SECOND_SERVERRESTART="EVENT_SERVERRESTART"
MYSQLEVENT_REPEAT_60_SECOND_VOTECHECK="ONINTERVAL_60_VOTECHECK"
MYSQLEVENT_REPEAT_300_SECOND_SERVERSTATUS="EVENT_SERVERSTATUS &"

DTSDHELP_myscheduler="\nMyscheduler usage: shadow.dtsd myscheduler on or off\nTurns the Myql Scheduler on or off.  Requires root password for Mysql\n"
DTSDHELP_clearschedule="\nClearschedule usage: shadow.dtsd clearschedule\nClears scheduled tasks\n"
DTSDHELP_addevents="\nAddevents usage: shadow.dtsd addevents\nAdds events from the script to the Mysql database\n"

core_myscheduler()
{
# [Turns the Myql Scheduler on or off.  Requires root password for Mysql] myscheduler usage:  shadow.dtsd myscheduler <on/off>
	if [ "$#" -ne "2" ]
	then
		echo "Usage:  myscheduler on or off"
	else
		case $2 in
		on)
		echo "Turning on Mysql Scheduler"
		  read -p "The password for Mysql root : " INPUT
            if [ -n "$INPUT" ]
            then
				mysql -u root -p$INPUT -e "SET GLOBAL event_scheduler = ON"
            else
				"You must use root password to turn on or off scheduler"
				exit
            fi
		;;
		off)
		echo "Turning off Mysql Scheduler"
		  read -p "The password for Mysql root : " INPUT
            if [ -n "$INPUT" ]
            then
				mysql -u root -p$INPUT -e "SET GLOBAL event_scheduler = OFF"
            else
				"You must use root password to turn on or off scheduler"
				exit
            fi
		;;
		esac
	fi

}
core_clearschedule() {
# [Clears scheduled tasks] clearschedule usage: shadow.dtsd clearschedule
	echo "Clearing all Schedules"
	CREATEVAR=( $(compgen -v | grep MYSQLEVENT_ ) )
	while [ -n "${CREATEVAR[$CREATEARRAY]+set}" ]
	do
		CURRENTSEARCH=${CREATEVAR[$CREATEARRAY]}
		SCHEDULECOMMAND=${!CURRENTSEARCH}
		mysql -D $CONFIGDTSD_MYSQLDB -u $CONFIGDTSD_MYSQLUSER -p$CONFIGDTSD_MYSQLPASS -e "drop event $SCHEDULECOMMAND;"
		let CREATEARRAY++
	done
}
core_addevents() {
# [Adds events from the script to the Mysql database] usage: shadow.dtsd addevents
CREATEVAR=( $(compgen -v | grep MYSQLEVENT_ ) )
CREATEARRAY=0
	while [ -n "${CREATEVAR[$CREATEARRAY]+set}" ]
	do
		CURRENTSEARCH=${CREATEVAR[$CREATEARRAY]}
		cutstring=${CURRENTSEARCH#*_}
		SCHEDULETYPE=${cutstring%%_*}
		cutstring=${cutstring#*_}
		TIMEVALUE=${cutstring%%_*}
		cutstring=${cutstring#*_}
		TIMEQUANTITY=${cutstring%%_*}
		EVENTNAME=${cutstring#*_}
		SCHEDULECOMMAND=${!CURRENTSEARCH}
		echo "this is SCHEDULETYPE $SCHEDULETYPE TIMEVALUE $TIMEVALUE TIMEQUANTITY $TIMEQUANTITY SCHEDULECOMMAND $SCHEDULECOMMAND EVENTNAME $EVENTNAME"
		
		case $SCHEDULETYPE in
			REPEAT)
				mysql -D $CONFIGDTSD_MYSQLDB -u $CONFIGDTSD_MYSQLUSER -p$CONFIGDTSD_MYSQLPASS -e "drop event $EVENTNAME;"
				mysql -D $CONFIGDTSD_MYSQLDB -u $CONFIGDTSD_MYSQLUSER -p$CONFIGDTSD_MYSQLPASS -e "CREATE EVENT $EVENTNAME ON SCHEDULE EVERY $TIMEVALUE $TIMEQUANTITY DO INSERT INTO COMMANDDB (COMMAND) VALUES (\"$SCHEDULECOMMAND\");"
			;;
		esac
		let CREATEARRAY++
	done

}
EVENT_SERVERMESSAGE() {
# A simple server message to send to all players
lib_screensend $CONFIGDTSD_MAINSCREEN "/chat Message sent from Shadow pre-Alpha database event"
}
EVENT_SERVERSTATUS() {
	echo "Checking Server Status"
	if lib_check_server_running
	then
		LASTLINE=$(mysql -D $CONFIGDTSD_MYSQLDB -u $CONFIGDTSD_MYSQLUSER -p$CONFIGDTSD_MYSQLPASS -sNe "SELECT line FROM SERVERLOG ORDER BY line DESC LIMIT 1;")
		LASTLINE=$(($LASTLINE - 5))
		CURRENTTIME=$(date +%s)
		lib_screensend $CONFIGDTSD_MAINSCREEN /pm SHADOW_SERVER_CHECK_$CURRENTTIME testing
		sleep 10
		SERVERREPAIR=$(mysql -D $CONFIGDTSD_MYSQLDB -u $CONFIGDTSD_MYSQLUSER -p$CONFIGDTSD_MYSQLPASS -sNe "select LOGSTRING from SERVERLOG where LOGSTRING like \"%Database Repairing itself%\" and SERVERLOG.line >= $LASTLINE") 
		if [ -n "$SERVERREPAIR" ]
			then
			echo "Sever appears to be repairing database"
		else
			echo "Server is not repairing database "
			CHECKSERVER=$(mysql -D $CONFIGDTSD_MYSQLDB -u $CONFIGDTSD_MYSQLUSER -p$CONFIGDTSD_MYSQLPASS -sNe "select LOGSTRING from SERVERLOG where LOGSTRING like \"%SHADOW_SERVER_CHECK_$CURRENTTIME%\"")
			echo "CHECKSERVER $CHECKSERVER"
			if [ -n "$CHECKSERVER" ]
			then
				echo "Sever appears to be running"
			else
				echo "Server appears to be down"
			core_softreset
			fi
		fi
	else
		echo "Starmade is not running!"
		core_softreset
	fi
}
EVENT_SERVERRESTART() {
core_softreset
}